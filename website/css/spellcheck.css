.input {
    min-width: 0; /* This is to prevent the input from expanding the grid when it contains a very long word */
    white-space: pre-wrap;
    overflow-wrap: break-word;
}

.input::after {
    content: "";
    display: block;
    position: absolute;
    z-index: 2;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    border-radius: var(--input-border-radius);
    background: var(--input-background-color);
    transition: opacity var(--correction-transition-duration);
    opacity: 0;
    /* It might be wise to (defensively) add visibility: hidden as well, but for some reason it causes animation issues
    in Firefox when tabbing between tokens; hopefully, pointer-events: none will do its job properly */
}

.input.input-correcting::after {
    opacity: 0.6;
}

t-t {
    color: var(--correction-color);
    max-width: 100%;
    position: relative;
}

t-t.correction-hyphenated {
    white-space: nowrap; /* This could have simply been added to all correction tokens, except for a Chrome bug:
                            https://bugs.chromium.org/p/chromium/issues/detail?id=1088314 */
}

.input t-t {
    --token-color-timing-function: ease;
    z-index: 0;
    transition-property: color, z-index;
    transition-duration: var(--correction-transition-duration);
    transition-timing-function: var(--token-color-timing-function), step-end;
}

.input t-t.correction-current {
    z-index: 3;
    transition-timing-function: var(--token-color-timing-function), step-start;
}

.input.input-correcting t-t:not(.correction-current) { /* For when directly switching from one token to another */
    z-index: 1;
    transition-timing-function: var(--token-color-timing-function), step-start;
}

.input t-t {
    cursor: pointer;
}

.input t-t.correction-none {
    cursor: inherit;
}

t-t.correction-none, t-t.correction-new {
    --correction-color: var(--input-background-color);
    color: var(--text-color); /* "inherit" doesn't play nicely with transitions */
}

t-t.correction-mistake:not(.correction-new) {
    --correction-color: var(--mistake-color);
}

t-t.correction-improvement:not(.correction-new) {
    --correction-color: var(--improvement-color);
}

t-t.correction-uncertain:not(.correction-new) {
    --correction-color: var(--uncertain-color);
}

t-t::after {
    content: "";
    display: block;
    position: absolute;
    z-index: -1;
    background-color: var(--correction-color);
    opacity: 0.15;
    transition-property: background-color, visibility;
    transition-duration: var(--correction-transition-duration);

    --token-highlight-min-width: 12px;

    margin: 0 auto;
    left: calc(0px - var(--token-highlight-min-width));
    right: calc(0px - var(--token-highlight-min-width));
    width: calc(100% + 2px);
    min-width: var(--token-highlight-min-width);
    border-radius: 2px;
    /* The following values give the perfect balance between Chrome, Firefox, and iOS: */
    top: 1px;
    bottom: -1px;
}

t-t.correction-none::after {
    visibility: hidden; /* Otherwise they are still "clickable" */
}

.input p:empty {
    height: var(--text-computed-line-height);
}

token-expander {
    /* Could have simply been t-t.correction-current::before if not for
       https://bugs.chromium.org/p/chromium/issues/detail?id=1088320 */
    position: absolute;
    z-index: -1; /* This must be behind the token itself for mouseover event not to retrigger after Escape is pressed */
    left: -1ch;
    right: -1ch;
    top: 0;
    bottom: calc(0px - var(--tooltip-top-margin));
    cursor: pointer;
}